package com.businessbot;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.api.objects.webapp.WebAppInfo;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import com.businessbot.config.BotConfig;
import com.businessbot.database.DatabaseManager;
import com.businessbot.service.AchievementService;
import com.businessbot.service.GameService;
import com.businessbot.service.UserService;

@Component
public class BusinessBot extends TelegramLongPollingBot {
    private final DatabaseManager databaseManager;
    private final UserService userService;
    private final GameService gameService;
    private final AchievementService achievementService;
    private final BotConfig botConfig;

    @Autowired
    public BusinessBot(DatabaseManager databaseManager, BotConfig botConfig) {
        this.databaseManager = databaseManager;
        this.botConfig = botConfig;
        this.userService = new UserService(databaseManager);
        this.gameService = new GameService(databaseManager, userService);
        this.achievementService = new AchievementService(userService, databaseManager);
        
        List<BotCommand> commands = new ArrayList<>();
        commands.add(new BotCommand("start", "–ù–∞—á–∞—Ç—å –∏–≥—Ä—É"));
        commands.add(new BotCommand("profile", "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"));
        commands.add(new BotCommand("mine", "–ú–∞–π–Ω–∏—Ç—å"));
        commands.add(new BotCommand("companies", "–ú–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏"));
        commands.add(new BotCommand("loans", "–ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã"));
        
        try {
            execute(new SetMyCommands(commands, new BotCommandScopeDefault(), null));
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    @Override
    public String getBotUsername() {
        return botConfig.getUsername();
    }

    @Override
    public String getBotToken() {
        return botConfig.getToken();
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            String messageText = update.getMessage().getText();

            userService.createUserIfNotExists(chatId);

            try {
                switch (messageText) {
                    case "/start" -> handleStart(chatId);
                    case "üí∞ –ë–∞–ª–∞–Ω—Å", "/profile" -> handleProfile(chatId);
                    case "/mine" -> handleMining(chatId);
                    case "üè¢ –ö–æ–º–ø–∞–Ω–∏–∏", "/companies" -> handleCompanies(chatId);
                    case "üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã" -> handleGames(chatId);
                    case "üè¶ –ë–∞–Ω–∫" -> handleBank(chatId);
                    case "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" -> handleStatistics(chatId);
                    case "/buy" -> handleBuyCompany(chatId);
                    case "/loans", "üìù –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã" -> handleLoansList(chatId);
                    default -> handleUnknownCommand(chatId);
                }
            } catch (Exception e) {
                e.printStackTrace();
                sendErrorMessage(chatId);
            }
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleStart(long chatId) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Business Bot!");
        
        ReplyKeyboardMarkup keyboardMarkup = new ReplyKeyboardMarkup();
        List<KeyboardRow> keyboard = new ArrayList<>();
        
        KeyboardRow row1 = new KeyboardRow();
        row1.add("üí∞ –ë–∞–ª–∞–Ω—Å");
        
        KeyboardButton miningButton = new KeyboardButton("‚õè –ú–∞–π–Ω–∏—Ç—å");
        WebAppInfo webAppInfo = new WebAppInfo();
        webAppInfo.setUrl("https://3000-46-72-189-82.ngrok-free.app/webapp");
        miningButton.setWebApp(webAppInfo);
        row1.add(miningButton);
        keyboard.add(row1);
        
        KeyboardRow row2 = new KeyboardRow();
        row2.add("üè¢ –ö–æ–º–ø–∞–Ω–∏–∏");
        row2.add("üéÆ –ú–∏–Ω–∏-–∏–≥—Ä—ã");
        keyboard.add(row2);
        
        KeyboardRow row3 = new KeyboardRow();
        row3.add("üè¶ –ë–∞–Ω–∫");
        row3.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞");
        keyboard.add(row3);
        
        keyboardMarkup.setKeyboard(keyboard);
        keyboardMarkup.setResizeKeyboard(true);
        message.setReplyMarkup(keyboardMarkup);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleProfile(long chatId) {
        var user = userService.getUser(chatId);
        String message = String.format("""
            üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
            
            üí∞ –ë–∞–ª–∞–Ω—Å: %.2f
            ‚ö° –ú–æ—â–Ω–æ—Å—Ç—å –º–∞–π–Ω–∏–Ω–≥–∞: %d
            üåü VIP —Å—Ç–∞—Ç—É—Å: %d
            """, 
            user.getBalance(), 
            user.getMiningPower(),
            user.getVipStatus()
        );
        sendMessage(chatId, message);
    }

    private void handleMining(long chatId) {
        double reward = gameService.click(chatId);
        sendMessage(chatId, String.format("‚õè –í—ã –Ω–∞–º–∞–π–Ω–∏–ª–∏ %.2f –º–æ–Ω–µ—Ç!", reward));
    }

    private void handleCompanies(long chatId) {
        var companies = userService.getUserCompanies(chatId);
        StringBuilder message = new StringBuilder("üè¢ –í–∞—à–∏ –∫–æ–º–ø–∞–Ω–∏–∏:\n\n");
        
        if (companies.isEmpty()) {
            message.append("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /buy –¥–ª—è –ø–æ–∫—É–ø–∫–∏.");
        } else {
            for (var company : companies) {
                message.append(String.format(
                    "üè≠ %s (–£—Ä–æ–≤–µ–Ω—å %d)\nüí∞ –î–æ—Ö–æ–¥: %.2f/—á–∞—Å\n\n",
                    company.getType(),
                    company.getLevel(),
                    gameService.calculateHourlyIncome(chatId)
                ));
            }
        }
        sendMessage(chatId, message.toString());
    }

    private void handleUnknownCommand(long chatId) {
        sendMessage(chatId, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
    }

    private void sendErrorMessage(long chatId) {
        sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }

    private void sendMessage(long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText(text);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleGames(long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInlineButton("üé≤ –ö–æ—Å—Ç–∏", "game_dice"));
        row1.add(createInlineButton("üé∞ –°–ª–æ—Ç—ã", "game_slots"));
        keyboard.add(row1);
        
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInlineButton("üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "game_number"));
        keyboard.add(row2);
        
        markup.setKeyboard(keyboard);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("üéÆ –í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏-–∏–≥—Ä—É:");
        message.setReplyMarkup(markup);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleBank(long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –î–µ–ø–æ–∑–∏—Ç—ã
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createInlineButton("üí≥ –û—Ç–∫—Ä—ã—Ç—å –¥–µ–ø–æ–∑–∏—Ç", "bank_deposit_menu"));
        row1.add(createInlineButton("üìä –ú–æ–∏ –¥–µ–ø–æ–∑–∏—Ç—ã", "bank_deposits_list"));
        keyboard.add(row1);
        
        // –ö—Ä–µ–¥–∏—Ç—ã
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createInlineButton("üíµ –í–∑—è—Ç—å –∫—Ä–µ–¥–∏—Ç", "bank_loan_menu"));
        row2.add(createInlineButton("üìù –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã", "bank_loans_list"));
        keyboard.add(row2);
        
        // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createInlineButton("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å", "bank_invest_menu"));
        row3.add(createInlineButton("üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å", "bank_portfolio"));
        keyboard.add(row3);
        
        // –ü–µ—Ä–µ–≤–æ–¥—ã
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createInlineButton("üí∏ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "bank_transfer"));
        row4.add(createInlineButton("üìã –ò—Å—Ç–æ—Ä–∏—è", "bank_history"));
        keyboard.add(row4);
        
        markup.setKeyboard(keyboard);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("""
            üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ —É—Å–ª—É–≥–∏:
            
            üí≥ –î–µ–ø–æ–∑–∏—Ç—ã:
            - –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π: 5% –≥–æ–¥–æ–≤—ã—Ö
            - –ü—Ä–µ–º–∏—É–º: 8% –≥–æ–¥–æ–≤—ã—Ö
            - VIP: 12% –≥–æ–¥–æ–≤—ã—Ö
            
            üíµ –ö—Ä–µ–¥–∏—Ç—ã:
            - –ë—ã—Å—Ç—Ä—ã–π: 10% –≥–æ–¥–æ–≤—ã—Ö
            - –ë–∏–∑–Ω–µ—Å: 15% –≥–æ–¥–æ–≤—ã—Ö
            - –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π: 20% –≥–æ–¥–æ–≤—ã—Ö
            
            üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏:
            - –ê–∫—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π
            - –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            - –ò–Ω–¥–µ–∫—Å–Ω—ã–µ —Ñ–æ–Ω–¥—ã
            
            üí∏ –ü–µ—Ä–µ–≤–æ–¥—ã:
            - –ú–µ–∂–¥—É –∏–≥—Ä–æ–∫–∞–º–∏
            - –ù–∞ –¥–µ–ø–æ–∑–∏—Ç
            - –ù–∞ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
            """);
        message.setReplyMarkup(markup);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleStatistics(long chatId) {
        var user = userService.getUser(chatId);
        String message = String.format("""
            üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
            
            üí∞ –ë–∞–ª–∞–Ω—Å: %.2f
            üè¢ –ö–æ–º–ø–∞–Ω–∏–π: %d
            üíµ –î–æ—Ö–æ–¥ –≤ —á–∞—Å: %.2f
            """,
            user.getBalance(),
            userService.getUserCompanies(chatId).size(),
            gameService.calculateHourlyIncome(chatId)
        );
        sendMessage(chatId, message);
    }

    private void handleBuyCompany(long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        keyboard.add(List.of(createInlineButton("üè™ –ú–∞–≥–∞–∑–∏–Ω (5,000 üí∞)", "buy_company_SHOP")));
        keyboard.add(List.of(createInlineButton("üè≠ –§–∞–±—Ä–∏–∫–∞ (15,000 üí∞)", "buy_company_FACTORY")));
        keyboard.add(List.of(createInlineButton("üíª IT –ö–æ–º–ø–∞–Ω–∏—è (50,000 üí∞)", "buy_company_TECH")));
        
        // –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        keyboard.add(List.of(createInlineButton("üè¢ –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä (100,000 üí∞)", "buy_company_BUSINESS_CENTER")));
        keyboard.add(List.of(createInlineButton("üè¶ –ë–∞–Ω–∫ (250,000 üí∞)", "buy_company_BANK")));
        keyboard.add(List.of(createInlineButton("üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è (500,000 üí∞)", "buy_company_CONSTRUCTION")));
        
        // –≠–ª–∏—Ç–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏
        keyboard.add(List.of(createInlineButton("üõ¢ –ù–µ—Ñ—Ç—è–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è (1,000,000 üí∞)", "buy_company_OIL")));
        keyboard.add(List.of(createInlineButton("üíé –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞ (2,500,000 üí∞)", "buy_company_CRYPTO")));
        keyboard.add(List.of(createInlineButton("üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è (5,000,000 üí∞)", "buy_company_SPACE")));
        
        markup.setKeyboard(keyboard);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("""
            üè¢ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é –¥–ª—è –ø–æ–∫—É–ø–∫–∏:
            
            –ù–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:
            üè™ –ú–∞–≥–∞–∑–∏–Ω
            üí∞ –¶–µ–Ω–∞: 5,000
            üíµ –î–æ—Ö–æ–¥: 100/—á–∞—Å
            
            üè≠ –§–∞–±—Ä–∏–∫–∞
            üí∞ –¶–µ–Ω–∞: 15,000
            üíµ –î–æ—Ö–æ–¥: 300/—á–∞—Å
            
            üíª IT –ö–æ–º–ø–∞–Ω–∏—è
            üí∞ –¶–µ–Ω–∞: 50,000
            üíµ –î–æ—Ö–æ–¥: 1,000/—á–∞—Å
            
            –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:
            üè¢ –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä
            üí∞ –¶–µ–Ω–∞: 100,000
            üíµ –î–æ—Ö–æ–¥: 2,500/—á–∞—Å
            
            üè¶ –ë–∞–Ω–∫
            üí∞ –¶–µ–Ω–∞: 250,000
            üíµ –î–æ—Ö–æ–¥: 7,500/—á–∞—Å
            
            üèó –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
            üí∞ –¶–µ–Ω–∞: 500,000
            üíµ –î–æ—Ö–æ–¥: 15,000/—á–∞—Å
            
            –≠–ª–∏—Ç–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏:
            üõ¢ –ù–µ—Ñ—Ç—è–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è
            üí∞ –¶–µ–Ω–∞: 1,000,000
            üíµ –î–æ—Ö–æ–¥: 35,000/—á–∞—Å
            
            üíé –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∞
            üí∞ –¶–µ–Ω–∞: 2,500,000
            üíµ –î–æ—Ö–æ–¥: 100,000/—á–∞—Å
            
            üöÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∫–æ–º–ø–∞–Ω–∏—è
            üí∞ –¶–µ–Ω–∞: 5,000,000
            üíµ –î–æ—Ö–æ–¥: 250,000/—á–∞—Å
            """);
        message.setReplyMarkup(markup);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        long chatId = callbackQuery.getMessage().getChatId();
        
        if (data.startsWith("bank_")) {
            switch (data) {
                case "bank_deposit_menu" -> handleDepositMenu(chatId);
                case "bank_deposits_list" -> handleDepositsList(chatId);
                case "bank_loan_menu" -> handleLoanMenu(chatId);
                case "bank_loans_list" -> handleLoansList(chatId);
                case "bank_invest_menu" -> handleInvestMenu(chatId);
                case "bank_portfolio" -> handlePortfolio(chatId);
                case "bank_transfer" -> handleTransfer(chatId);
                case "bank_history" -> handleBankHistory(chatId);
                case "bank_menu" -> handleBank(chatId);
            }
        } else if (data.startsWith("deposit_")) {
            handleDepositAction(chatId, data);
        } else if (data.startsWith("loan_")) {
            if (data.equals("loan_repay")) {
                handleLoanRepayment(chatId);
            } else {
                handleLoanAction(chatId, data);
            }
        } else if (data.startsWith("invest_")) {
            handleInvestAction(chatId, data);
        } else if (data.startsWith("buy_company_")) {
            handleBuyCompanyAction(chatId, data);
        }
    }

    private void handleDepositMenu(long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        keyboard.add(List.of(createInlineButton("üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π (5%)", "deposit_open_standard")));
        keyboard.add(List.of(createInlineButton("üíé –ü—Ä–µ–º–∏—É–º (8%)", "deposit_open_premium")));
        keyboard.add(List.of(createInlineButton("üëë VIP (12%)", "deposit_open_vip")));
        keyboard.add(List.of(createInlineButton("üîô –ù–∞–∑–∞–¥", "bank_menu")));
        
        markup.setKeyboard(keyboard);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("""
            üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–µ–ø–æ–∑–∏—Ç–∞:
            
            üí∞ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç
            - –°—Ç–∞–≤–∫–∞: 5% –≥–æ–¥–æ–≤—ã—Ö
            - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 1,000
            - –°—Ä–æ–∫: 1 –¥–µ–Ω—å
            
            üíé –ü—Ä–µ–º–∏—É–º –¥–µ–ø–æ–∑–∏—Ç
            - –°—Ç–∞–≤–∫–∞: 8% –≥–æ–¥–æ–≤—ã—Ö
            - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10,000
            - –°—Ä–æ–∫: 3 –¥–Ω—è
            
            üëë VIP –¥–µ–ø–æ–∑–∏—Ç
            - –°—Ç–∞–≤–∫–∞: 12% –≥–æ–¥–æ–≤—ãÔøΩÔøΩ
            - –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 100,000
            - –°—Ä–æ–∫: 7 –¥–Ω–µ–π
            """);
        message.setReplyMarkup(markup);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleDepositAction(long chatId, String action) {
        String type = action.replace("deposit_open_", "");
        double minAmount = switch (type) {
            case "standard" -> 1000.0;
            case "premium" -> 10000.0;
            case "vip" -> 100000.0;
            default -> 0.0;
        };
        
        var user = userService.getUser(chatId);
        if (user.getBalance() < minAmount) {
            sendMessage(chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –¥–µ–ø–æ–∑–∏—Ç–∞");
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –¥–µ–ø–æ–∑–∏—Ç
        if (gameService.createDeposit(chatId, type, minAmount)) {
            sendMessage(chatId, String.format(
                "‚úÖ –î–µ–ø–æ–∑–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç!\n\n–°—É–º–º–∞: %.2f\n–¢–∏–ø: %s",
                minAmount,
                type
            ));
        } else {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –¥–µ–ø–æ–∑–∏—Ç–∞");
        }
    }

    private void handleLoanMenu(long chatId) {
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        keyboard.add(List.of(createInlineButton("üíµ –ë—ã—Å—Ç—Ä—ã–π –∫—Ä–µ–¥–∏—Ç (10%)", "loan_quick")));
        keyboard.add(List.of(createInlineButton("üíº –ë–∏–∑–Ω–µ—Å –∫—Ä–µ–¥–∏—Ç (15%)", "loan_business")));
        keyboard.add(List.of(createInlineButton("üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π (20%)", "loan_investment")));
        keyboard.add(List.of(createInlineButton("üîô –ù–∞–∑–∞–¥", "bank_menu")));
        
        markup.setKeyboard(keyboard);
        
        SendMessage message = new SendMessage();
        message.setChatId(chatId);
        message.setText("""
            üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∫—Ä–µ–¥–∏—Ç–∞:
            
            üíµ –ë—ã—Å—Ç—Ä—ã–π –∫—Ä–µ–¥–∏—Ç
            - –°—Ç–∞–≤–∫–∞: 10% –≥–æ–¥–æ–≤—ã—Ö
            - –°—É–º–º–∞: –¥–æ 10,000
            - –°—Ä–æ–∫: 3 –¥–Ω—è
            
            üíº –ë–∏–∑–Ω–µ—Å –∫—Ä–µ–¥–∏—Ç
            - –°—Ç–∞–≤–∫–∞: 15% –≥–æ–¥–æ–≤—ã—Ö
            - –°—É–º–º–∞: –¥–æ 50,000
            - –°—Ä–æ–∫: 7 –¥–Ω–µ–π
            
            üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
            - –°—Ç–∞–≤–∫–∞: 20% –≥–æ–¥–æ–≤—ã—Ö
            - –°—É–º–º–∞: –¥–æ 200,000
            - –°—Ä–æ–∫: 14 –¥–Ω–µ–π
            """);
        message.setReplyMarkup(markup);
        
        try {
            execute(message);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleLoanAction(long chatId, String action) {
        String type = action.replace("loan_", "");
        double maxAmount = switch (type) {
            case "quick" -> 10000.0;
            case "business" -> 50000.0;
            case "investment" -> 200000.0;
            default -> 0.0;
        };
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫—Ä–µ–¥–∏—Ç–∞
        if (userService.hasActiveLoan(chatId)) {
            sendMessage(chatId, "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç. –ü–æ–≥–∞—Å–∏—Ç–µ –µ–≥–æ –ø–µ—Ä–µ–¥ –≤–∑—è—Ç–∏–µ–º –Ω–æ–≤–æ–≥–æ.");
            return;
        }
        
        // –°–æ–∑–¥–∞–µ–º –∫—Ä–µ–¥–∏—Ç
        if (userService.takeLoan(chatId, type)) {
            sendMessage(chatId, String.format(
                """
                ‚úÖ –ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!
                
                üí∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: %.2f
                üìÖ –¢–∏–ø: %s
                
                ‚ùóÔ∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç –≤–æ–≤—Ä–µ–º—è
                –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /loans –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤
                """,
                maxAmount,
                getLoanTypeName(type)
            ));
        } else {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞");
        }
    }

    private void handleLoansList(long chatId) {
        var loans = userService.getUserLoans(chatId);
        if (loans.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤");
            return;
        }
        
        StringBuilder message = new StringBuilder("üìù –í–∞—à–∏ –∫—Ä–µ–¥–∏—Ç—ã:\n\n");
        for (var loan : loans) {
            message.append(String.format(
                """
                üí∞ –°—É–º–º–∞: %.2f
                üìà –°—Ç–∞–≤–∫–∞: %.1f%%
                üìÖ –î–∞—Ç–∞ –≤–∑—è—Ç–∏—è: %s
                üíµ –ö –æ–ø–ª–∞—Ç–µ: %.2f
                
                """,
                loan.getAmount(),
                loan.getInterestRate() * 100,
                loan.getLoanDate(),
                loan.getTotalDebt()
            ));
        }
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞
        keyboard.add(List.of(createInlineButton("üí∞ –ü–æ–≥–∞—Å–∏—Ç—å –∫—Ä–µ–¥–∏—Ç", "loan_repay")));
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –±–∞–Ω–∫–æ–≤—Å–∫–æ–µ –º–µ–Ω—é
        keyboard.add(List.of(createInlineButton("üîô –ù–∞–∑–∞–¥ –≤ –±–∞–Ω–∫", "bank_menu")));
        
        markup.setKeyboard(keyboard);
        
        SendMessage response = new SendMessage();
        response.setChatId(chatId);
        response.setText(message.toString());
        response.setReplyMarkup(markup);
        
        try {
            execute(response);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String getLoanTypeName(String type) {
        return switch (type) {
            case "quick" -> "–ë—ã—Å—Ç—Ä—ã–π –∫—Ä–µ–¥–∏—Ç";
            case "business" -> "–ë–∏–∑–Ω–µ—Å –∫—Ä–µ–¥–∏—Ç";
            case "investment" -> "–ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫—Ä–µ–¥–∏—Ç";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø";
        };
    }

    private void handleInvestMenu(long chatId) {
        // Implement invest menu handling logic
    }

    private void handlePortfolio(long chatId) {
        // Implement portfolio handling logic
    }

    private void handleTransfer(long chatId) {
        // Implement transfer handling logic
    }

    private void handleBankHistory(long chatId) {
        // Implement bank history handling logic
    }

    private void handleBuyCompanyAction(long chatId, String data) {
        String companyType = data.substring("buy_company_".length());
        boolean success = gameService.buyCompany(chatId, companyType);
        
        String responseText;
        if (success) {
            responseText = String.format(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ –∫–æ–º–ø–∞–Ω–∏—é: %s\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /companies —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–∏ –∫–æ–º–ø–∞–Ω–∏–∏.",
                getCompanyName(companyType)
            );
        } else {
            responseText = "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏.";
        }
        
        try {
            execute(SendMessage.builder()
                .chatId(chatId)
                .text(responseText)
                .build());
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private String getCompanyName(String type) {
        return switch (type) {
            case "SHOP" -> "üè™ –ú–∞–≥–∞–∑–∏ÔøΩÔøΩ";
            case "FACTORY" -> "üè≠ –§–∞–±—Ä–∏–∫–∞";
            case "TECH_COMPANY" -> "üíª IT –ö–æ–º–ø–∞–Ω–∏—è";
            default -> "–ö–æ–º–ø–∞–Ω–∏—è";
        };
    }

    private InlineKeyboardButton createInlineButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    private void handleDepositsList(long chatId) {
        var deposits = userService.getUserDeposits(chatId);
        if (deposits.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–ø–æ–∑–∏—Ç–æ–≤");
            return;
        }
        
        StringBuilder message = new StringBuilder("üìù –í–∞—à–∏ –¥–µ–ø–æ–∑–∏—Ç—ã:\n\n");
        for (var deposit : deposits) {
            message.append(String.format(
                """
                üí∞ –°—É–º–º–∞: %.2f
                üìà –°—Ç–∞–≤–∫–∞: %.1f%%
                üìÖ –î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è: %s
                üíµ –¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: %.2f
                
                """,
                deposit.getAmount(),
                deposit.getInterestRate() * 100,
                deposit.getStartDate(),
                deposit.getCurrentAmount()
            ));
        }
        
        InlineKeyboardMarkup markup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        keyboard.add(List.of(createInlineButton("üîô –ù–∞–∑–∞–¥", "bank_menu")));
        markup.setKeyboard(keyboard);
        
        SendMessage response = new SendMessage();
        response.setChatId(chatId);
        response.setText(message.toString());
        response.setReplyMarkup(markup);
        
        try {
            execute(response);
        } catch (TelegramApiException e) {
            e.printStackTrace();
        }
    }

    private void handleInvestAction(long chatId, String action) {
        String[] parts = action.split("_");
        if (parts.length < 3) {
            sendMessage(chatId, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–µ–π—Å—Ç–≤–∏—è");
            return;
        }
        
        String operation = parts[1]; // buy –∏–ª–∏ sell
        String assetType = parts[2]; // STOCK, CRYPTO, INDEX
        
        if ("buy".equals(operation)) {
            handleInvestBuy(chatId, assetType);
        } else if ("sell".equals(operation)) {
            handleInvestSell(chatId, assetType);
        }
    }

    private void handleInvestBuy(long chatId, String assetType) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        sendMessage(chatId, "üîÑ –§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
    }

    private void handleInvestSell(long chatId, String assetType) {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–¥–∞–∂–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π
        sendMessage(chatId, "üîÑ –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–∞–∂–∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ");
    }

    private void handleLoanRepayment(long chatId) {
        var loans = userService.getUserLoans(chatId);
        if (loans.isEmpty()) {
            sendMessage(chatId, "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤");
            return;
        }
        
        var loan = loans.get(0); // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∫—Ä–µ–¥–∏—Ç
        var user = userService.getUser(chatId);
        double totalDebt = loan.getAmount() * (1 + loan.getInterestRate()); // –°—É–º–º–∞ + –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        
        if (user.getBalance() < totalDebt) {
            sendMessage(chatId, String.format(
                "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–≥–∞—à–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–∞\n–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: %.2f\n–£ –≤–∞—Å: %.2f",
                totalDebt,
                user.getBalance()
            ));
            return;
        }
        
        // –ü–æ–≥–∞—à–∞–µ–º –∫—Ä–µ–¥–∏—Ç
        if (userService.repayLoan(chatId, loan.getId(), totalDebt)) {
            sendMessage(chatId, String.format(
                """
                ‚úÖ –ö—Ä–µ–¥–∏—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–≥–∞—à–µ–Ω!
                
                üí∞ –°–ø–∏—Å–∞–Ω–æ: %.2f
                üíµ –û—Å–Ω–æ–≤–Ω–æ–π –¥–æ–ª–≥: %.2f
                üìà –ü—Ä–æ—Ü–µ–Ω—Ç—ã: %.2f
                """,
                totalDebt,
                loan.getAmount(),
                totalDebt - loan.getAmount()
            ));
        } else {
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≥–∞—à–µ–Ω–∏–∏ –∫—Ä–µ–¥–∏—Ç–∞");
        }
    }
} 